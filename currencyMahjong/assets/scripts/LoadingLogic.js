// Generated by CoffeeScript 1.12.5

cc.Class({
    "extends": cc.Component,
    properties: {
        tipLabel: cc.Label,
        _stateMsg: "",
        _progress: 0.0,
        _splash: null,
        _isLoading: false
    },
    onLoadComplete: function() {
        this._isLoading = false;
        this._stateMsg = "准备登陆";
        cc.director.loadScene("Login");
        return cc.loader.onProgress = null;
    },
    startPreloading: function() {
        var self;
        cc.log("startPreloading ....");
        this._stateMsg = "正在加载资源,请稍等";
        this._isLoading = true;
        self = this;
        cc.loader.onProgress = function(completedCount, totalCount, item) {
            if (self._isLoading) {
                return self._progress = completedCount / totalCount;
            }
        };
        return cc.loader.loadResAll("texture", function(err, assets) {
            return self.onLoadComplete();
        });
    },
    onLoad: function() {
        this.initMgr();
        this.tipLabel.string = this._stateMsg;
        this._splash = cc.find("Canvas/Splash");
        this._splash.active = true;
    },
    update: function(dt) {
        if (this._stateMsg.length === 0) {
            return;
        }
        return this.tipLabel.string = this._stateMsg;
    },
    checkVersion: function() {
        var complete, fn, fnRequest, onGetVersion, self, xhr;
        cc.log('checkVersion...... start');
        self = this;
        onGetVersion = function(ret) {
            var alert;
            cc.log('onGetVersion ', JSON.stringify(ret));
            if (ret.version === null) {
                return console.log("error");
            } else {
                cc.vv.SI = ret;
                cc.log("VERSION 1 : ", cc.VERSION);
                cc.log("VERSION 2 : ", ret.version);
                if (ret.version !== cc.VERSION) {
                    cc.log("VERSION 2 : ", ret.version);
                    alert = cc.find("Canvas/Alert");
                    return alert.active = true;
                } else {
                    return self.startPreloading();
                }
            }
        };
        xhr = null;
        complete = false;
        fnRequest = function() {
            self._stateMsg = "正在连接服务器";
            xhr = cc.vv.http.sendRequest("/get_serverinfo", null, function(ret) {
                xhr = null;
                complete = true;
                return onGetVersion(ret);
            });
            return setTimeout(fn, 5000);
        };
        fn = function() {
            var fnR;
            cc.log('fn...... complete', complete);
            if (!complete) {
                if (xhr) {
                    xhr.abort;
                    self._stateMsg = "连接失败, 即将重试";
                    fnR = function() {
                        return fnRequest();
                    };
                    return setTimeout(fnR, 5000);
                } else {
                    return fnRequest();
                }
            }
        };
        fn();
        return cc.log('checkVersion...... end');
    },
    start: function() {
        var FADE_TIME, SHOW_TIME, fn, self, t;
        self = this;
        SHOW_TIME = 100;
        FADE_TIME = 500;
        cc.log('cc.sys.os ', cc.sys.os);
        cc.log('cc.sys.OS_IOS ', cc.sys.OS_IOS);
        cc.log('cc.sys.isNative ', cc.sys.isNative);
        if (true || true) {
            self._splash.active = true;
            t = Date.now();
            cc.log(' tttttt ', t);
            fn = function() {
                var dt, op;
                dt = Date.now() - t;
                cc.log('cc date dt', dt);
                if (dt < SHOW_TIME) {
                    return setTimeout(fn, 33);
                } else {
                    op = (1 - ((dt - SHOW_TIME) / FADE_TIME)) * 255;
                    cc.log('op ======== ', op);
                    if (op <= 0) {
                        self._splash.opacity = 0;
                        self.checkVersion();
                        return cc.log('self.checkVersion', op);
                    } else {
                        self._splash.opacity = op;
                        return setTimeout(fn, 33);
                    }
                }
            };
            return setTimeout(fn, 33);
        } else {
            return self._splash.active = false;
        }
    },
    initMgr: function() {
        cc.vv = {};
        cc.vv.http = require("HTTP");
        var UserMgr = require("UserMgr");
        cc.vv.userMgr = new UserMgr();
        var AudioMgr = require("AudioMgr");
        cc.vv.audioMgr = new AudioMgr();
        cc.vv.audioMgr.init();
        cc.vv.net = require("Net");
        var GameNetMgr = require("GameNetMgr");
        cc.vv.gameNetMgr = new GameNetMgr();
        cc.vv.gameNetMgr.initHandlers();
        var PlayersManage = require("PlayersManage");
        cc.vv.playersManager = new PlayersManage();
        cc.vv.playersManager.init();
        var Utils = require("Utils");
        cc.vv.utils = new Utils();
        cc.args = this.urlParse();
    },
    urlParse: function() {
        var arr,name, num, params, str, value;
        params = {};
        if (!window.location) {
            return params;
        }
        str = window.location.href;
        num = str.indexOf("?");
        str = str.substr(num + 1);
        arr = str.split("&");

        for (var i = 0; i < arr.length; i++) {
            num = arr[i].indexOf("=");
            if (num > 0) {
                name = arr[i].substring(0, num);
                value = arr[i].substr(num + 1);
                params[name] = value;
            }
        }
        return params;
    }
});


