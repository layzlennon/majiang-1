// Generated by CoffeeScript 1.12.5

var Global;

if (cc.sys.isNative) {
    console.log('SocketIO');
    window.io = SocketIO;
}

Global = cc.Class({
    "extends": cc.Component,
    statics: {
        ip: "",
        sio: null,
        isPinging: false,
        fnDisconnect: null,
        handlers: {},
        addHandler: function(event, fn) {
            var handler;
            if (this.handlers[event]) {
                console.log("event:" + event + "' handler has been registered.");
                return;
            }
            handler = function(data) {
                if (event !== "disconnect" && typeof data === "string") {
                    data = JSON.parse(data);
                }
                return fn(data);
            };
            this.handlers[event] = handler;
            if (this.sio) {
                console.log("register:function " + event);
                return this.sio.on(event, handler);
            }
        },
        connect: function(fnConnect, fnError) {
            var key, opts, ref, self, value;
            self = this;
            opts = {
                'reconnection': false,
                'force new connection': true,
                'transports': ['websocket', 'polling']
            };
            this.sio = window.io.connect(this.ip, opts);
            this.sio.on("reconnect", function(data) {
                return console.log("reconnect");
            });
            this.sio.on("connect", function(data) {
                console.log("connect" + JSON.stringify(data));
                self.sio.connected = true;
                return fnConnect(data);
            });
            this.sio.on("disconnect", function(data) {
                console.log("disconnect");
                self.sio.connected = false;
                return self.close();
            });
            this.sio.on("connect_failed", function(data) {
                return console.log("connect_failed");
            });
            ref = this.handlers;
            for (key in ref) {
                value = ref[key];
                if (typeof value === "function") {
                    if (key === 'disconnect') {
                        this.fnDisconnect = value;
                    } else {
                        console.log("register:function " + key);
                        this.sio.on(key, value);
                    }
                }
            }
            return this.startHearbeat();
        },
        startHearbeat: function() {
            var callBack, self;
            self = this;
            this.sio.on('game_pong', function() {
                console.log('game_pong');
                return self.lastRecieveTime = Date.now();
            });
            this.lastRecieveTime = Date.now();
            console.log("1111111111111");
            if (!self.isPinging) {
                console.log("222222222");
                self.isPinging = true;
                callBack = function() {
                    if (self.sio) {
                        console.log("start heart ping");
                        if (Date.now() - self.lastRecieveTime > 10000) {
                            return self.close();
                        } else {
                            return self.ping();
                        }
                    } else {
                        return console.log("net is disconnnect");
                    }
                };
                return setInterval(callBack, 5000);
            }
        },
        send: function(event, data) {
            if (this.sio.connected) {
                if (data !== null && typeof data === "object") {
                    data = JSON.stringify(data);
                }
                console.log("sendC2Smsg: " + JSON.stringify(data));
                return this.sio.emit(event, data);
            }
        },
        ping: function() {
            return this.send('game_ping');
        },
        sendPlayTile: function(tile) {
            var param;
            param = {
                action: 'play',
                tile: tile
                // roomId:cc.director.TableGlobalData.getRoomId(),
                // seatId:cc.director.TableGlobalData.getSeatId(),
            };
            this.sendTableCallGet(param);
        },
        sendTableCallGet: function(data) {
            data['roomId'] = cc.director.TableGlobalData.getRoomId();
            data['seatId'] = cc.director.TableGlobalData.getSeatId();

            this.send('table_call_get', data);
        },
        close: function() {
            console.log("close");
            if (this.sio && this.sio.connected) {
                this.sio.connected = false;
                this.sio.disconnect();
                this.sio = null;
            }
            if (this.fnDisconnect) {
                this.fnDisconnect();
                this.fnDisconnect = null;
                return this.sio = null;
            }
        }
    }
});


//# sourceMappingURL=Net.js.map
